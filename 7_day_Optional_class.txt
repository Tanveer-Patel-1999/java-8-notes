Optional Class
==============
Q1 : what is mean by Optional class?
--> Optional is a "container  is a public final class and used to deal "with NullPointerException" in Java application.
" used to contain " not-null value or object ".
--> Optional class is a final class.
--> using optional class " null checks " are not required and no more " null pointer exception " at run time.
--> To avoid abnormal termination, we use the  "Optional class".






--> optional is used to represent " null value " with " absent value".
--> we can avoid " boiler plate code ".
--> Optional class is a final class.
 
 
Q2 : What are the methods present in the " Optional class"?
--> they are three methods

1 : empty() 			: empty() method return an "empty optional instance".

2 : of(T value) 		: of() method return an " not null  value".

3 : ofNullable(T value) : ofNullable() method return " optional empty " based on described or specified value.

4 : isPresent () 		: 

note :
====
1 : when we used optional class then must be used " get() " method to retreive a data.
2 : when we used get() method first we used isPresent() method to check the data is present or not.
2 : when we used optional class first you make sure data is present or not.

  static Optional<String> personNameUsingOptional(Optional<Person> person)
    {
//        if (person !=null)
        if (person.isPresent())
        { 
            return person.map(Person::getName); // used map() method when we used optional
        }
        else {
            return Optional.empty();
        }
    }
	
--> obj.isPresent() : it chcek the condition  : if(name.isPresent){ sout(name.get());} : it return boolean value
--> obj.ifPresent() [ aye value leta hau deta kuch nhi] : it will take the value but not give the value : it take input as consumer : name.ifPresent(System.out::println);
--> Optional.of(name) : it take only not  null value if null value is present it will through null pointer exception
--> optional.ofNullable(name) : it will take both value and null value .
--> Optional.empty() : it is used to empty optinal instance
--> obj.orElse() : it will give default value is not present
--> obj.orElseGet() : it take supplier Interface as a input it will not take anything it just gives values :
--> obj.orElseThrow() : if value is not present then it will through exception.